import{s as o}from"./supabase-B2tzS42n.js";const u=async t=>{try{let{data:r,error:e}=await o.from("Art").select("*").eq("id",t);if(e)console.log(" get contact err",e);else return r[0]}catch(r){throw console.error("Error fetching notes:",r),r}},y=async t=>{const r=await d(),e=await h(),s=r.filter(a=>a.userId===t).map(a=>a.id);return e.filter(a=>s.includes(a.artId)).length},w=async t=>(await d()).filter(e=>e.userId===t).length,A=async t=>{try{let{data:r,error:e}=await o.from("ArtTypes").select("*").eq("id",t);if(e)console.log(" get contact err",e);else return r[0]}catch(r){throw console.error("Error fetching notes:",r),r}},p=async t=>{try{let{data:r,error:e}=await o.from("Art").select("*").eq("eventId",t);if(e)console.log(" get contact err",e);else return r}catch(r){throw console.error("Error fetching notes:",r),r}},v=async(t,r)=>{try{let{data:e,error:s}=await o.from("Art").select("*").eq("eventId",t).eq("userId",r);if(s)console.log(" get contact err",s);else return e}catch(e){throw console.error("Error fetching notes:",e),e}},m=async(t,r)=>{try{let{data:e,error:s}=await o.from("Art").select("*").lt("eventId",t).eq("userId",r);if(s)console.log(" get contact err",s);else return e}catch(e){throw console.error("Error fetching notes:",e),e}},E=async()=>{try{let{data:t,error:r}=await o.from("ArtTypes").select("*");if(r)console.log(" get contact err",r);else return t}catch(t){throw console.error("Error fetching notes:",t),t}},I=async t=>{try{const{data:r,error:e}=await o.from("Art").insert([t]).select();return r[0]}catch(r){throw console.error("Error adding art:",r),r}},q=async(t,r)=>{try{const{data:e,error:s}=await o.from("Art").update(t).eq("id",r).select();return e[0]}catch(e){throw console.error("Error updating art:",e),e}},T=async t=>{try{const{data:r,error:e}=await o.from("Art").delete().eq("id",t);if(e)console.log(" get contact err",e);else return r}catch(r){throw console.error("Error fetching notes:",r),r}},k=async(t,r)=>{try{let{data:e,error:s}=await o.from("Art").select("*").eq("eventId",t).eq("artTypeId",r).eq("selected",!0);if(s)console.log(" get contact err",s);else return e}catch(e){throw console.error("Error fetching notes:",e),e}},V=async t=>{try{let{data:r,error:e}=await o.from("Art").select("*").eq("eventId",t).eq("selected",!0);if(e)console.log(" get contact err",e);else return r}catch(r){throw console.error("Error fetching notes:",r),r}},h=async()=>{try{let{data:t,error:r}=await o.from("ArtVotes").select("*");if(r)console.log(" get contact err",r);else return t.length===0?[]:t}catch(t){throw console.error("Error fetching notes:",t),t}},_=async(t,r)=>{try{const{data:e,error:s}=await o.from("ArtVotes").insert([{artId:t,userId:r}]).select();return e[0]}catch(e){throw console.error("Error adding art vote:",e),e}},B=async()=>{try{const{count:t,error:r}=await o.from("Art").select("*",{count:"exact",head:!0});return t}catch(t){throw console.error("Error adding art vote:",t),t}},d=async()=>{try{const{data:t,error:r}=await o.from("Art").select("*");return r?(console.log("getAllArtworks error",r),[]):t}catch(t){throw console.error("Error fetching all artworks:",t),t}},C=(t,r)=>{const e={};r.forEach(c=>{e[c.artId]=(e[c.artId]||0)+1});const s=t.map(c=>({...c,_votes:e[c.id]||0})),l={};s.forEach(c=>{const n=c.artTypeId;l[n]||(l[n]=[]),l[n].push(c)});const a=[];for(const c in l){const n=l[c].sort((i,g)=>g._votes-i._votes).slice(0,2);a.push(...n)}return a.sort((c,n)=>n._votes-c._votes),a.map(({_votes:c,...n})=>n)};export{B as a,u as b,A as c,y as d,p as e,w as f,h as g,E as h,v as i,m as j,V as k,C as l,I as m,d as n,k as o,_ as p,T as q,q as u};
