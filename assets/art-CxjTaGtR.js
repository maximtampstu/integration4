import{s as o}from"./supabase-B2tzS42n.js";const h=async t=>{try{let{data:r,error:e}=await o.from("Art").select("*").eq("id",t);if(e)console.log(" get contact err",e);else return r[0]}catch(r){throw console.error("Error fetching notes:",r),r}},y=async t=>{try{let{data:r,error:e}=await o.from("ArtTypes").select("*").eq("id",t);if(e)console.log(" get contact err",e);else return r[0]}catch(r){throw console.error("Error fetching notes:",r),r}},f=async t=>{try{let{data:r,error:e}=await o.from("Art").select("*").eq("eventId",t);if(e)console.log(" get contact err",e);else return r}catch(r){throw console.error("Error fetching notes:",r),r}},u=async(t,r)=>{try{let{data:e,error:c}=await o.from("Art").select("*").eq("eventId",t).eq("userId",r);if(c)console.log(" get contact err",c);else return e}catch(e){throw console.error("Error fetching notes:",e),e}},A=async(t,r)=>{try{let{data:e,error:c}=await o.from("Art").select("*").lt("eventId",t).eq("userId",r);if(c)console.log(" get contact err",c);else return e}catch(e){throw console.error("Error fetching notes:",e),e}},w=async()=>{try{let{data:t,error:r}=await o.from("ArtTypes").select("*");if(r)console.log(" get contact err",r);else return t}catch(t){throw console.error("Error fetching notes:",t),t}},p=async t=>{try{const{data:r,error:e}=await o.from("Art").insert([t]).select();return r[0]}catch(r){throw console.error("Error adding art:",r),r}},E=async(t,r)=>{try{const{data:e,error:c}=await o.from("Art").update(t).eq("id",r).select();return e[0]}catch(e){throw console.error("Error updating art:",e),e}},m=async t=>{try{const{data:r,error:e}=await o.from("Art").delete().eq("id",t);if(e)console.log(" get contact err",e);else return r}catch(r){throw console.error("Error fetching notes:",r),r}},v=async(t,r)=>{try{let{data:e,error:c}=await o.from("Art").select("*").eq("eventId",t).eq("artTypeId",r).eq("selected",!0);if(c)console.log(" get contact err",c);else return e}catch(e){throw console.error("Error fetching notes:",e),e}},I=async t=>{try{let{data:r,error:e}=await o.from("Art").select("*").eq("eventId",t).eq("selected",!0);if(e)console.log(" get contact err",e);else return r}catch(r){throw console.error("Error fetching notes:",r),r}},q=async()=>{try{let{data:t,error:r}=await o.from("ArtVotes").select("*");if(r)console.log(" get contact err",r);else return t.length===0?[]:t}catch(t){throw console.error("Error fetching notes:",t),t}},T=async(t,r)=>{try{const{data:e,error:c}=await o.from("ArtVotes").insert([{artId:t,userId:r}]).select();return e[0]}catch(e){throw console.error("Error adding art vote:",e),e}},k=async()=>{try{const{count:t,error:r}=await o.from("Art").select("*",{count:"exact",head:!0});return t}catch(t){throw console.error("Error adding art vote:",t),t}},_=async()=>{try{const{data:t,error:r}=await o.from("Art").select("*");return r?(console.log("getAllArtworks error",r),[]):t}catch(t){throw console.error("Error fetching all artworks:",t),t}},B=(t,r)=>{const e={};r.forEach(s=>{e[s.artId]=(e[s.artId]||0)+1});const c=t.map(s=>({...s,_votes:e[s.id]||0})),a={};c.forEach(s=>{const n=s.artTypeId;a[n]||(a[n]=[]),a[n].push(s)});const l=[];for(const s in a){const n=a[s].sort((d,i)=>i._votes-d._votes).slice(0,2);l.push(...n)}return l.sort((s,n)=>n._votes-s._votes),l.map(({_votes:s,...n})=>n)};export{k as a,h as b,y as c,u as d,A as e,f,q as g,I as h,B as i,w as j,p as k,_ as l,v as m,T as n,m as o,E as u};
